// src/modules/database/commands/seed.handler.ts
import chalk from 'chalk';
import { isNil } from 'lodash';
import ora from 'ora';

import { Configure } from '@/modules/config/configure';
import { panic } from '@/modules/core/helpers';

import { runSeeder } from '../helpers';
import { DbOptions } from '../types';

import { SeederOptions } from './types';

/**
 * ÂëΩ‰ª§Â§ÑÁêÜÂô®
 * Âà§Êñ≠Âú®ÂΩìÂâçÊï∞ÊçÆÂ∫ìËøûÊé•ÁöÑÈÖçÁΩÆ‰∏≠ÊúâËá™ÂÆö‰πâÁöÑÂ°´ÂÖÖÂÖ•Âè£Á±ªÔºåÊ≤°ÊúâÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑSeedRunnerÁ±ª
   ‰ΩøÁî®runSeederËøêË°åÂ°´ÂÖÖ
 * @param configure 
 * @param args 
 */
export const SeedHandler = async (configure: Configure, args: SeederOptions) => {
    const cname = args.connection ?? 'default';
    const { connections = [] }: DbOptions = await configure.get<DbOptions>('database');
    const dbConfig = connections.find(({ name }) => name === cname);
    if (isNil(dbConfig)) panic(`Database connection named ${cname} not exists!`);
    const runner = dbConfig.seedRunner;
    const spinner = ora('Start run seeder');
    try {
        spinner.start();
        await runSeeder(runner, args, spinner, configure, dbConfig);
        spinner.succeed(`\n üëç ${chalk.greenBright.underline(`Finished Seeding`)}`);
        process.exit();
    } catch (error) {
        panic({ spinner, message: `Run seeder failed`, error });
    }
};